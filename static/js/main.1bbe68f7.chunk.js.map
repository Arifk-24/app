{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","class","onClick","props","this","value","React","Component","Board","i","square","rendersquare","App","state","history","Array","fill","Isxturn","length","slice","declarewinner","setState","concat","list","a","b","c","status","winner","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAGMA,G,6KACI,IAAD,OACP,OACD,4BAAQC,MAAO,SACfC,QAAS,kBAAI,EAAKC,MAAMD,YACtBE,KAAKD,MAAME,MAFb,S,GAHoBC,IAAMC,YASrBC,E,2KAEQC,GAAG,IAAD,OACd,OAAO,kBAAC,EAAD,CACPJ,MAAQD,KAAKD,MAAMO,OAAOD,GAC1BP,QAAS,kBAAI,EAAKC,MAAMD,QAAQO,Q,+BAIhC,OACA,6BACA,2BAAOR,MAAQ,SACf,4BACA,4BAAKG,KAAKO,aAAa,IACvB,4BAAKP,KAAKO,aAAa,IACvB,4BAAKP,KAAKO,aAAa,KAEvB,4BACA,4BAAKP,KAAKO,aAAa,IACvB,4BAAKP,KAAKO,aAAa,IACvB,4BAAKP,KAAKO,aAAa,KAEvB,4BACA,4BAAKP,KAAKO,aAAa,IACvB,4BAAKP,KAAKO,aAAa,IACvB,4BAAKP,KAAKO,aAAa,W,GAzBLL,IAAMC,WAsGXK,E,kDArEd,WAAYT,GAAO,IAAD,8BACjB,cAAMA,IACDU,MAAM,CACVC,QAAQ,CACP,CAACJ,OAAQK,MAAM,GAAGC,KAAK,QAExBC,SAAS,GANO,E,wDAUNR,GACX,IAAMK,EAASV,KAAKS,MAAMC,QAEpBJ,EADSI,EAAQA,EAAQI,OAAO,GACfR,OAAOS,QAC3Bf,KAAKgB,cAAcV,IAAWA,EAAOD,KAExCC,EAAOD,GAAGL,KAAKS,MAAMI,QAAQ,IAAK,IAClCb,KAAKiB,SAAS,CACbP,QAASA,EAAQQ,OAAO,CAAC,CACxBZ,OAAOA,KAERO,SAAUb,KAAKS,MAAMI,a,oCAITP,GAWb,IAVA,IAAMa,EAAK,CACX,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEGd,EAAE,EAAEA,EAAEc,EAAKL,OAAOT,IAC1B,CAAC,IAAD,cACcc,EAAKd,GADnB,GACOe,EADP,KACSC,EADT,KACWC,EADX,KAEA,GAAGhB,EAAOc,IAAKd,EAAOc,KAAKd,EAAOe,IAAMf,EAAOc,KAAKd,EAAOgB,GAC1D,OAAOhB,EAAOc,GAEf,OAAO,O,+BAEC,IAIJG,EAJG,OACDb,EAASV,KAAKS,MAAMC,QAEpBJ,EADSI,EAAQA,EAAQI,OAAO,GAChBR,OAAOS,QAEvBS,EAAQxB,KAAKgB,cAAcV,GAKjC,OAHCiB,EADEC,EACM,cAAeA,EAEf,mBAAoBxB,KAAKS,MAAMI,QAAQ,IAAI,KAEpD,6BACA,oDACA,6BACA,uBAAGhB,MAAO,UAAU0B,GACpB,kBAAC,EAAD,CACAjB,OAASA,EACTR,QAAS,SAAAO,GAAC,OAAI,EAAKoB,YAAYpB,Y,GA9DfH,IAAMC,WChCJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1bbe68f7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Square extends React.Component{\n\trender(){\n  return (\n\t<button class =\"button\" \n\tonClick={()=>this.props.onClick()}\n\t>{this.props.value} </button>\n  );\n\t}\n}\nclass Board extends React.Component{\n\n\trendersquare(i){\n\t\treturn <Square \n\t\tvalue= {this.props.square[i]}\t\n\t\tonClick={()=>this.props.onClick(i)}\n\t\t/>;\n\t}\n\trender(){\n\t\treturn(\n\t\t<div>\n\t\t<table class = \"board\">\t\t\n\t\t<tr>\t    \n\t\t<td>{this.rendersquare(0)}</td>\n\t\t<td>{this.rendersquare(1)}</td>\n\t\t<td>{this.rendersquare(2)}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t<td>{this.rendersquare(3)}</td>\n\t\t<td>{this.rendersquare(4)}</td>\n\t\t<td>{this.rendersquare(5)}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t<td>{this.rendersquare(6)}</td>\n\t\t<td>{this.rendersquare(7)}</td>\n\t\t<td>{this.rendersquare(8)}</td>\n\t\t</tr>\n\t\t</table>\n\t\t</div>\n\t\t);\n\t}\n}\nclass App extends React.Component{\n\tconstructor(props){\n\t\tsuper(props); \n\t\tthis.state={\n\t\t\thistory:[\n\t\t\t\t{square: Array(9).fill(null),}\n\t\t\t],\n\t\t\tIsxturn: true\n\t\t};\n\t}\n\n\thandleClick(i){\n\t\tconst history= this.state.history;\n\t\tconst current= history[history.length-1];\n\t\tconst square = current.square.slice();\n\t\tif(this.declarewinner(square) || square[i])\n\t\t\treturn;\n\t\tsquare[i]=this.state.Isxturn?\"X\": \"O\";\n\t\tthis.setState({\n\t\t\thistory: history.concat([{\n\t\t\t\tsquare:square,\n\t\t\t}]),\n\t\t\tIsxturn: !this.state.Isxturn\n\t\t});\n\t}\n\n\tdeclarewinner(square){\n\t\tconst list=[\n\t\t[0,1,2],\n\t\t[3,4,5],\n\t\t[6,7,8],\n\t\t[0,3,6],\n\t\t[1,4,7],\n\t\t[2,5,8],\n\t\t[0,4,8],\n\t\t[2,4,6]\n\t\t];\n\t\tfor(let i=0;i<list.length;i++)\n\t\t{\n\t\tconst [a,b,c]=list[i];\n\t\tif(square[a]&& square[a]===square[b] && square[a]===square[c])\n\t\t\treturn square[a];\n\t\t}\n\t\treturn null;\n\t}\n\trender(){\n\t\tconst history= this.state.history;\n\t\tconst current= history[history.length-1];\n\t\tconst square= current.square.slice();\n\t\tlet status;\n\t\tconst winner= this.declarewinner(square);\n\t\tif(winner)\n\t\t\tstatus= \"Winner is :\"+ winner;\n\t\telse\n\t\t\tstatus= \"player status: \"+ (this.state.Isxturn?\"X\":\"O\");\n\t\treturn(\n\t\t<div>\n\t\t<h1>Welcome to the Game </h1>\n\t\t<div >\n\t\t<p class =\"status\">{status}</p>\n\t\t<Board\n\t\tsquare ={square}\n\t\tonClick={i => this.handleClick(i)}\n\t\t/>\n\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}